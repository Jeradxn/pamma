# Regras do Cursor - Projeto Consulta de Pre√ßos Mercado Livre

## üéØ Diretrizes Gerais

### Comunica√ß√£o
- **SEMPRE** responda em portugu√™s brasileiro
- Use linguagem t√©cnica apropriada para engenharia de software
- Seja claro e direto nas explica√ß√µes

### Qualidade do C√≥digo
- Siga as melhores pr√°ticas do TypeScript e NestJS
- Implemente padr√µes SOLID e Clean Architecture
- Mantenha fun√ß√µes pequenas e focadas (m√°ximo 20-30 linhas)
- Evite duplica√ß√£o de c√≥digo - sempre verifique se j√° existe funcionalidade similar

### Arquitetura
- **Backend**: Use NestJS com arquitetura modular e decorators
- **Frontend**: Use Component-Based Architecture com React
- Implemente Custom Hooks para l√≥gica de neg√≥cio
- Service Layer para comunica√ß√£o com APIs externas
- Repository Pattern para acesso ao banco de dados
- Mantenha componentes pequenos e reutiliz√°veis

## üèóÔ∏è Estrutura do Projeto

### Organiza√ß√£o de Arquivos
```
backend/              # Backend NestJS
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ products/     # M√≥dulo de produtos
‚îÇ   ‚îú‚îÄ‚îÄ mercado-livre/ # M√≥dulo de integra√ß√£o ML
‚îÇ   ‚îú‚îÄ‚îÄ common/       # Utilit√°rios e decorators
‚îÇ   ‚îî‚îÄ‚îÄ main.ts       # Arquivo principal

frontend/             # Frontend React
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/   # Componentes React reutiliz√°veis
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductTable/ # Tabela de produtos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PriceComparison/ # Compara√ß√£o de pre√ßos
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SyncButton/   # Bot√£o de sincroniza√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ hooks/        # Custom hooks
‚îÇ   ‚îú‚îÄ‚îÄ services/     # Servi√ßos externos
‚îÇ   ‚îú‚îÄ‚îÄ types/        # Tipos TypeScript
‚îÇ   ‚îú‚îÄ‚îÄ utils/        # Fun√ß√µes utilit√°rias
‚îÇ   ‚îî‚îÄ‚îÄ pages/        # P√°ginas da aplica√ß√£o

docker/               # Configura√ß√µes Docker
‚îú‚îÄ‚îÄ Dockerfile.backend
‚îú‚îÄ‚îÄ Dockerfile.frontend
‚îî‚îÄ‚îÄ docker-compose.yml
```

### Padr√µes de Nomenclatura
- **Componentes**: PascalCase (ex: `ProductTable`, `PriceComparison`)
- **Hooks**: camelCase com prefixo use (ex: `useProducts`, `useMercadoLivre`)
- **Servi√ßos**: camelCase com sufixo Service (ex: `mercadoLivreService`)
- **Arquivos**: PascalCase para componentes, camelCase para outros (ex: `ProductTable.tsx`, `useProducts.ts`)
- **Vari√°veis e fun√ß√µes**: camelCase (ex: `getProductById`)

## üîß Tecnologias e Depend√™ncias

### Backend
- **NestJS**: Framework Node.js com TypeScript
- **Banco de Dados**: SQLite com TypeORM
- **Valida√ß√£o**: Class-validator e class-transformer
- **HTTP**: Express (via NestJS)

### Frontend
- **React**: 18+ com TypeScript
- **UI**: Material-UI
- **Estado**: React Hooks ou Context API
- **HTTP**: Axios para APIs externas
- **Planilha**: Excel.js ou similar
- **Build**: Create React App

### DevOps
- **Containeriza√ß√£o**: Docker e Docker Compose
- **Deploy**: GitHub Pages (frontend), Vercel/Heroku (backend)
- **CI/CD**: GitHub Actions (opcional)
- **Monitoramento**: Console do navegador e logs

## üìù Padr√µes de C√≥digo

### Tipos TypeScript
```typescript
export interface Product {
  id: string;
  sku: string;
  name: string;
  brand: string;
  cost: number;
  price: number;
  stock: number;
  ean?: string;
  category?: string;
  description?: string;
}

export interface PriceComparison {
  product: Product;
  mercadoLivrePrices: MercadoLivrePrice[];
  costDifference: number;
  priceRange: {
    min: number;
    max: number;
    average: number;
  };
}

export interface MercadoLivrePrice {
  id: string;
  title: string;
  price: number;
  seller: string;
  condition: 'new' | 'used';
  shipping: number;
  totalPrice: number;
}
```

### Custom Hooks
```typescript
import { useState, useEffect } from 'react';
import { Product, MercadoLivrePrice } from '../types';
import { mercadoLivreService } from '../services/mercadoLivreService';

export const useProducts = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const loadProducts = async (file: File) => {
    setLoading(true);
    setError(null);
    try {
      // L√≥gica para ler planilha Excel
      const productsData = await readExcelFile(file);
      setProducts(productsData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Erro ao carregar produtos');
    } finally {
      setLoading(false);
    }
  };

  return { products, loading, error, loadProducts };
};

export const useMercadoLivre = () => {
  const [prices, setPrices] = useState<MercadoLivrePrice[]>([]);
  const [loading, setLoading] = useState(false);

  const searchPrices = async (sku: string, ean?: string) => {
    setLoading(true);
    try {
      const results = await mercadoLivreService.searchProduct(sku, ean);
      setPrices(results);
    } catch (error) {
      console.error('Erro ao buscar pre√ßos:', error);
    } finally {
      setLoading(false);
    }
  };

  return { prices, loading, searchPrices };
};
```

### Servi√ßos
```typescript
import axios from 'axios';
import { MercadoLivrePrice } from '../types';

const MERCADO_LIVRE_API_BASE = 'https://api.mercadolibre.com';

export const mercadoLivreService = {
  async searchProduct(sku: string, ean?: string): Promise<MercadoLivrePrice[]> {
    try {
      // Busca por SKU ou EAN no Mercado Livre
      const searchTerm = ean || sku;
      const response = await axios.get(`${MERCADO_LIVRE_API_BASE}/sites/MLB/search`, {
        params: {
          q: searchTerm,
          limit: 20
        }
      });

      return response.data.results.map((item: any) => ({
        id: item.id,
        title: item.title,
        price: item.price,
        seller: item.seller.nickname,
        condition: item.condition,
        shipping: item.shipping?.free_shipping ? 0 : item.shipping?.cost || 0,
        totalPrice: item.price + (item.shipping?.free_shipping ? 0 : item.shipping?.cost || 0)
      }));
    } catch (error) {
      console.error('Erro na API do Mercado Livre:', error);
      throw new Error('Falha ao buscar pre√ßos no Mercado Livre');
    }
  },

  async getProductDetails(productId: string): Promise<any> {
    try {
      const response = await axios.get(`${MERCADO_LIVRE_API_BASE}/items/${productId}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao buscar detalhes do produto:', error);
      throw new Error('Falha ao buscar detalhes do produto');
    }
  }
};
```

## üß™ Testes

### Estrutura de Testes
```
src/
‚îú‚îÄ‚îÄ __tests__/        # Testes da aplica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ components/   # Testes dos componentes
‚îÇ   ‚îú‚îÄ‚îÄ hooks/        # Testes dos custom hooks
‚îÇ   ‚îî‚îÄ‚îÄ services/     # Testes dos servi√ßos
‚îú‚îÄ‚îÄ __mocks__/        # Mocks para testes
‚îî‚îÄ‚îÄ test-utils/       # Utilit√°rios de teste
```

### Padr√µes de Teste
- Use Jest e React Testing Library
- Mock APIs externas (Mercado Livre)
- Teste casos de sucesso e erro
- Teste intera√ß√µes do usu√°rio
- Use MSW para mock de APIs

## üîí Seguran√ßa

### Autentica√ß√£o
- JWT tokens com expira√ß√£o
- Refresh tokens
- Hash de senhas com bcrypt
- Rate limiting nas APIs

### Autoriza√ß√£o
- Sistema de roles e permiss√µes
- Middleware de autoriza√ß√£o
- Valida√ß√£o de entrada em todas as APIs
- Sanitiza√ß√£o de dados

## üìä Logs e Monitoramento

### Logs
- Use structlog para logs estruturados
- Log todos os eventos importantes
- Inclua correlation IDs para rastreamento
- Diferentes n√≠veis por ambiente

### M√©tricas
- Prometheus para m√©tricas
- Grafana para dashboards
- Alertas para falhas cr√≠ticas
- Health checks para APIs

## üöÄ Deploy e Ambiente

### Configura√ß√µes
- Use vari√°veis de ambiente para configura√ß√µes
- Diferentes configs por ambiente (dev, test, prod)
- Valida√ß√£o de configura√ß√µes na inicializa√ß√£o
- Secrets gerenciados de forma segura

### Docker
- Multi-stage builds para otimiza√ß√£o
- Health checks nos containers
- Volumes para dados persistentes
- Networks isoladas

## üîÑ Processo de Desenvolvimento

### Commits
- Use Conventional Commits
- Mensagens em portugu√™s
- Referencie issues/tasks nos commits

### Code Review
- Revis√£o obrigat√≥ria para PRs
- Checklist de qualidade
- Testes devem passar
- Cobertura de c√≥digo mantida

### Refatora√ß√£o
- Refatore quando arquivos passarem de 300 linhas
- Mantenha fun√ß√µes pequenas e focadas
- Use princ√≠pios SOLID para decis√µes de refatora√ß√£o
- Documente mudan√ßas arquiteturais

## üìö Documenta√ß√£o

### C√≥digo
- Docstrings em todas as fun√ß√µes p√∫blicas
- Type hints obrigat√≥rios
- README atualizado
- API docs com Swagger/OpenAPI

### Arquitetura
- Diagramas de arquitetura
- Decision records para decis√µes importantes
- Guias de desenvolvimento
- Troubleshooting guides

## üéØ Regras Espec√≠ficas do Projeto

### Integra√ß√£o Mercado Livre
- Implemente retry logic com exponential backoff
- Use circuit breaker para falhas
- Cache dados frequentemente acessados
- Log todas as opera√ß√µes de sincroniza√ß√£o

### Integra√ß√£o Bling
- Valide dados antes do envio
- Implemente fallback para falhas
- Sincroniza√ß√£o incremental quando poss√≠vel
- Monitoramento de performance

### Planilha
- Valida√ß√£o robusta de dados
- Mapeamento configur√°vel de campos
- Tratamento de erros de formato
- Backup autom√°tico antes de importa√ß√µes

## ‚ö†Ô∏è Anti-patterns a Evitar

- ‚ùå N√£o use vari√°veis globais
- ‚ùå N√£o implemente l√≥gica de neg√≥cio em controllers
- ‚ùå N√£o ignore tratamento de erros
- ‚ùå N√£o use strings m√°gicas
- ‚ùå N√£o implemente depend√™ncias circulares
- ‚ùå N√£o ignore logs de auditoria
- ‚ùå N√£o use exce√ß√µes para controle de fluxo

## ‚úÖ Checklist de Qualidade

Antes de submeter c√≥digo:
- [ ] C√≥digo segue padr√µes definidos
- [ ] Testes passam e cobertura > 90%
- [ ] Logs implementados para opera√ß√µes cr√≠ticas
- [ ] Documenta√ß√£o atualizada
- [ ] Valida√ß√£o de entrada implementada
- [ ] Tratamento de erros adequado
- [ ] Performance aceit√°vel
- [ ] Seguran√ßa implementada
